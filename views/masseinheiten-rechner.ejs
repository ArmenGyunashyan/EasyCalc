<!DOCTYPE html>
<html>
<head>
    <script src="skripts/dropdown.js"></script>
    <title>Maßeinheits-Rechner</title>
    <link rel="stylesheet" id="sheet"
          href="<% if(style == 'dunkel') { %>css/dark.css<% } else { %>css/default.css<% } %>">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
</head>
<body>
<header class="header">
    <div class="header-fixed-size">
        <h1 class="logo">EasyCalc</h1>
        <label class="switch">
            <input type="checkbox" id="styleChecker" <% if(style == 'hell') { %>checked
                    <% } %>
            >
            <span class="slider round"></span>
        </label>
        <% if(activeSession.loggedin) { %>
            <div class="userbox"><p class="username"><%= activeSession.username %></p><br></div>
        <% } else { %>
            <div style="display: none"></div>
        <% } %>
        <nav class="navbar">
            <div class="dropdown">
                <script src="skripts/dropdown.js"></script>
                <input type="image"
                       src="<% if (style == 'hell') { %>images/ThreeLines.svg<% } else { %>images/ThreeLinesDark.svg<% } %>"
                       class="dropbtn" onClick="mobileNavbar()">
                <div id="myDropdown" class="dropdown-content">
                    <a href="index.html">HOME</a>
                    <a href="kurs.html">KURS</a>
                    <a href="info.html">INFO</a>
                    <% if(activeSession.loggedin) { %> <a href="logout">LOGOUT</a>
                    <% } else { %>
                        <a href="login.html">LOGIN</a>
                    <% } %>
                </div>

            </div>
        </nav>

        <hr>
    </div>
</header>
<section class="fixed-size">
    <!--
    =================================================================================
       v Muss beim Überarbeiten des Designs übernommen werden   v   v   v   v   v   v
    =================================================================================
    -->
    <div>
        <h1 class="rechner-header">Maßeinheiten -Rechner</h1>
        <form class="rechner-form" action="/masseinheiten-rechner.html" method="POST">
            <div class="radiobtn"><input id="inchToMetricRadio" type="radio" name="inchToMetric" value="true" checked>zoll
                > cm
            </div>
            <div class="radiobtn"><input id="metricToInchRadio" type="radio" name="inchToMetric" value="false">cm > zoll
            </div>
            <input id="numberField" class="nmbField" type="number" step="0.01" name="input" placeholder="0" min="0"
                   required>
            <input type="submit" value="Berechnen" class="berechnenbtn">
            <p id="resultLabel" class="resultLabel"></p>
        </form>
        <br>

    </div>
    <br>
    <div>
        <h1 id="verlauf-header" class="verlauf-header">Verlauf</h1>
        <ul id="list" class="chronicList">

        </ul>
        <div class="pager-btn">
            <button id="prevBTN" onclick="prevRange(15)"><<</button>
            <button id="nextBTN" onclick="nextRange(15)">>></button>
        </div>
    </div>
    <!--
    =================================================================================
    ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   
    =================================================================================
    -->

</section>
<!--
    ===================================
    Footer
    ===================================
    -->
<div>
    <footer class="footer">
        <hr>
        <h1 class="footer-header"><a href="impressum.html">Impressum</a></h1>
        <p>Dennis & Armen</p>
        <p>Münsterstraße 265 46397 Bocholt</p>
        <p>WHS</p>
    </footer>
</div>
</body>
<!--
    ===================================
    Skripte
    ===================================
    -->

<!--
=============================================================================================================
x     *       +       x     *       +       x     *       +       x     *       +       x     *       +
Pager-Logik | NICHT AUSLAGERN!!! (Enthält EJS Code)      +       x     *       +       x     *       +
x     *       +       x     *       +       x     *       +       x     *       +       x     *       +
=============================================================================================================
-->
<script>
    //-------------------------------------------------------------------------------------------
    // Variablen (über EJS) und DOM-Elemente
    //-------------------------------------------------------------------------------------------

    /**Chronic ist ein JSON-Array mit JSON-Objekten, welches die Fake-Query zur Chronik des Nutzers bereitstellt
     *  Bei einer echten DB-Query würde man auch direkt nur nach dem aktuellen Nutzer filtern. Dies machen
     *  wir "emuliert" spöter in JavaScript
     *
     *  chronic[i].user         :string                             // Nutzer, der die Berechnung durchgeführt hat (Eineindeutig)
     *  chronic[i].inchToMetric :boolean                            // Rechenmodus (zoll >> cm | cm >> zoll)
     *  chronic[i].input        :number (float bei JavaScript)      // Eingabe zum Umwandeln
     *  chronic[i].result       :number (float bei JavaScript)      // Das Ergebnis der Berechnung
     */

        // Das Array mit der Chronic wird von der EJS übergeben und nur nach den Einträgen des aktuellen Nutzers gefiltert und am Ende überschrieben
        // Zunächt wird eine Hilfvariable befüllt und am Ende wird 'chronic' durch die Hilfsvariable überschrieben
            <%
            var tmp = "[";
            var match = 0;
            for (var i = chronic.length - 1; i >= 0; i--) {
                if (chronic[i].user == activeSession.username) {
                    tmp = tmp + JSON.stringify(chronic[i]) + ",";
                    ++match;
                }
            }
            tmp = tmp.substring(0, tmp.length - 1) + "]";
            if (match > 0) {
                chronic = tmp;
            } else {
                chronic = null; //Keine passenden Nutzerdaten gefunden
            }
            %>
    var chronic<% if(activeSession.loggedin && chronic) { %> = JSON.parse(<%- JSON.stringify(chronic) %>);<% } else { %> = "";<% } %> // Ich weis dass das hier sehr schwer zu verstehen ist.
    var left = 0;
    var right = 0;
    const list = document.getElementById('list');
    const nextBTN = document.getElementById('nextBTN');
    const prevBTN = document.getElementById('prevBTN');
    const verlaufHeader = document.getElementById('verlauf-header');
    verlaufHeader.style.display = 'none';
    nextBTN.style.display = 'none';
    prevBTN.style.display = 'none';
    //-------------------------------------------------------------------------------------------
    // Initialisierungs-Funktionen
    //-------------------------------------------------------------------------------------------

    initializeRange(15);          //Beschreibung bei Funktion selbst
    renderPager(left, right);    //Beschreibung bei Funktion selbst

    //-------------------------------------------------------------------------------------------
    // Funktionen (mit Beschreibung)
    //-------------------------------------------------------------------------------------------

    /**
     * Object : addElement(input, inchToMetric, result)
     * Erstellt ein neues <li> Element (DOM) und füllt es mit Inhalt (Text und Function() zum Laden der Parameter in das Formular)
     *
     * Referenz:
     *          input : number          -> Was hat der Nutzer bei seiner Rechnung angegeben
     *          inchToMetric : boolean  -> Welcher der beiden Methoden (RadioButtons) war bei der Berechnung gewählt
     *          result : number         -> Wie lautete das Ergebnis
     * Return:
     *          none
     */
    function addElement(input, inchToMetric, result) {
        var listElement = document.createElement('li');
        var elementLink = document.createElement('a');
        elementLink.href = "#";
        if (inchToMetric == 'true') {
            elementLink.appendChild(document.createTextNode(input + " zoll = " + result + " cm"));
            elementLink.onclick = function () {
                numberField.value = input;
                inchToMetricRadio.checked = true;
                resultLabel.innerHTML = ""; //Reset des alten Ergebnisses im Label
            };
        } else {
            elementLink.appendChild(document.createTextNode(input + " cm = " + result + " zoll"));
            elementLink.onclick = function () {
                numberField.value = input;
                metricToInchRadio.checked = true;
                resultLabel.innerHTML = ""; //Reset des alten Ergebnisses im Label
            };
        }
        listElement.appendChild(elementLink);

        list.appendChild(listElement);
    }

    /**
     * Void : initializeRange()
     * Legt die Pangergrenzen beim ersten Laden der Seite fest. Das Limit ist 10 Elemente pro Page.
     * Sollte ein Array weniger als 10 Objekte haben, wird die Länge des Arrays als Obergrenze genommen.
     * Die Variablen left und right sind global und werden nicht returnt.
     * Hinweis: Das Array wird später rückwärts gelesen. Die Grenzen sind daran angepasst.
     *
     * Return:
     *          (Globale Variablen)
     *          left : number
     *          right : number
     */
    function initializeRange(factor) {

        left = 0;
        if (chronic.length <= factor) {
            right = chronic.length;
        } else {
            right = 15;
        }
    }

    /**
     * Void : renderPager(left, right)
     * Eine for-Schleife die wiederholt die ein Onjekt über die Funktion "addElement" erzeugt.
     * Das neue Objekt (Element) wird danach über die DOM an das Mutter-Element <ul> angehangen.
     * Zu beginn werden die alten Elemente gelöscht.
     * Wenn es noch mehr Elemente gibt in beide Grenzrichtungen, werden Buttons eingeblendet, um das
     * Umblättern zu ermöglichen.
     * Hinweis: Das Array wird rückwärts gelesen. Die Grenzen sind daran angepasst.
     * Der letzte/aktuellste Einrtrag soll als erstes gelistet sein.
     *
     * Referenz:
     *          left : number          -> Die untere Grenze zum Auslesen des Array (Fake-DB-Query)
     *          right : number         -> Die obere Grenze zum Auslesen des Array (Fake-DB-Query)
     * Return:
     *          none
     */
    function renderPager(left, right) {

        if (right == 0 && left == 0) {
            verlaufHeader.style.display = 'none';
        } else {
            verlaufHeader.style.display = 'block';

        }

        list.innerHTML = ""; //Löschen aller aktuelle <li>'s

        for (var i = left; i < right; i++) {
            addElement(chronic[i].input, chronic[i].inchToMetric, chronic[i].result);
        }

        //Überprüfungen, ob Buttons benötigt werden
        if (left - 1 <= 0) { //Es gibt noch Elemente
            prevBTN.style.display = 'none';
        } else {
            prevBTN.style.display = 'block';
        }
        if (right + 1 > chronic.length) {
            nextBTN.style.display = 'none';
        } else {
            nextBTN.style.display = 'block';
        }

    }

    /**
     * Void : nextPage(factor)
     * Der Bereich 'left' bis 'right' wird um (factor) Einheiten nach Links verschoben (Da die Liste rückwärts gelesen wird).
     * Die Liste wird danach mit den neuen, globalen Werten 'left | right' neu gerendert, um
     * die Veränderung auch sichtbar zu machen
     * Hinweis: Das Array wird rückwärts gelesen. Die Grenzen sind daran angepasst.
     * Würden die neuen Grenzen das Array überschreiten, werden stattdssen die entsprechenden Array-Grenzen genutzt.
     *
     * Referenz:
     *          factor : number        -> Gibt an, wie viele Elemente pro Page gerendert werden soll. (Meist 10)
     * Return:
     *          none
     */
    function nextRange(factor) {
        //Right und Left werden runter gezählt (Array wird von Hinten aufgerollt)
        left = right;
        right = right + factor;
        if (left > chronic.length) {
            left = chronic.length;
        }
        if (right > chronic.length) {
            right = chronic.length;
        }
        renderPager(left, right);
    }

    /**
     * Void : nextPage(factor)
     * Der Bereich 'left' bis 'right' wird um (factor) Einheiten nach Rechts verschoben (Da die Liste rückwärts gelesen wird).
     * Die Liste wird danach mit den neuen, globalen Werten 'left | right' neu gerendert, um
     * die Veränderung auch sichtbar zu machen
     * Hinweis: Das Array wird rückwärts gelesen. Die Grenzen sind daran angepasst.
     * Würden die neuen Grenzen das Array überschreiten, werden stattdssen die entsprechenden Array-Grenzen genutzt.
     *
     * Referenz:
     *          factor : number        -> Gibt an, wie viele Elemente pro Page gerendert werden soll. (Meist 10)
     * Return:
     *          none
     */
    function prevRange(factor) {
        //Right und Left werden rauf gezählt (Array wird von Hinten aufgerollt)
        right = left;
        left = left - factor;
        if (left < 0) {
            left = 0;
        }
        if (right < 0) {
            right = 0;
        }
        renderPager(left, right);
    }
</script>
<!--
=============================================================================================================
  x     *       +       x     *       +       x     *       +       x     *       +       x     *       +       
Rechner-Logik | NICHT AUSLAGERN!!! (Enthält EJS Code)   +       x     *       +       x     *       +       
  x     *       +       x     *       +       x     *       +       x     *       +       x     *       +       
=============================================================================================================
-->
<script>
    //-------------------------------------------------------------------------------------------
    // Variablen (über EJS) und DOM-Elemente
    //-------------------------------------------------------------------------------------------

    var result; // Ergebnis vom Backend (EJS)
    var inputSet; // JSON Array mit dem Body des POST's (um das Formular befüllt zu lassen) (EJS)
    const resultLabel = document.getElementById('resultLabel');
    const numberField = document.getElementById('numberField');
    const metricToInchRadio = document.getElementById('metricToInchRadio');
    const inchToMetricRadio = document.getElementById('inchToMetricRadio');

    <% if(locals.result) { %>result = <%= result %>;<% } %>
    <% if(locals.inputSet) { %>inputSet = <%- JSON.stringify(inputSet) %>;<% } %>
    //-------------------------------------------------------------------------------------------
</script>
<script src="skripts/masseinheiten-rechnerLogic.js">
</script>


<script>
    //Import der Variablen aus der RenderEngine (EJS)
    //Die Variablen werden von den nachfolgenden Skripten benötigt

    var style = "<%= style %>";
    <% if(locals.statistics) { %>
    var statistics = <%- JSON.stringify(statistics) %>;
    <% } %>
</script>
<% if(locals.statistics) { %>
    <script src="skripts/canvasJS.js"></script>
<% } %>
<script src="skripts/cookieStyleLoader.js"></script>
</html>